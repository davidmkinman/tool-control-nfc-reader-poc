; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

; [env:esp-wrover-kit]
; platform = espressif32
; board = esp-wrover-kit
; framework = arduino
; lib_deps =
;   # Using a library name
;   ArduinoJson
;   ESP32AwsIotCore

[platformio]
default_envs = debug


[bintray]
user = inmandmk
repository = esp32
package = slms-tool-control-nfc-unit
api_token = ${sysenv.BINTRAY_API_TOKEN}

[common]

platform = espressif32
upload_port = "/dev/cu.SLAB_USBtoUART"
; firmware version, please modify it between releases
; positive integer value
release_version = 1

; build configuration based on Bintray
build_flags =
    '-DBINTRAY_USER="${bintray.user}"'
    '-DBINTRAY_REPO="${bintray.repository}"'
    '-DBINTRAY_PACKAGE="${bintray.package}"'
    '-DBINTRAY_TOKEN="${bintray.api_token}"'

lib_deps =
  # Using a library name
  ArduinoJson
  ESP32AwsIotCore
;   Adafruit PN532@>=1.0.4
  hd44780
  BintrayClient
 # ESPCrashMonitor


[env:debug]
platform = ${common.platform}
framework = arduino
board =  esp32doit-devkit-v1
build_flags =
    ${common.build_flags}
    -DVERSION=0
monitor_speed = 9600
upload_speed = 921600
upload_port = /dev/cu.SLAB_USBtoUART


lib_deps = ${common.lib_deps}

[env:release]
platform = ${common.platform}
framework = arduino
board =  esp32doit-devkit-v1
build_flags =
    ${common.build_flags}
    -DVERSION=0
monitor_speed = 9600
upload_speed = 921600
lib_deps = ${common.lib_deps}
upload_protocol = custom
extra_scripts = pre:publish_firmware.py

[env:oldupload]
platform = ${common.platform}
framework = arduino
board = esp32doit-devkit-v1
build_flags =
    ${common.build_flags}
    -DVERSION=${common.release_version}
lib_deps = ${common.lib_deps}
monitor_speed = 9600
upload_speed = 921600
upload_port = /dev/cu.SLAB_USBtoUART
; upload_protocol = custom
; extra_scripts = pre:publish_firmware.py


    
